# PRO-TIP: Set editior syntax to bash (or sh)

################################################################################
# Tag Trace Replay Packet Format
#
# M = number of masters
# N = max(1, clog2(#_of_tag_clients))
# D = max(client_1_width, client_2_width, ..., client_n_width)
# L = clog2(D+1)
#
# |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
# +----------------+----------+----------+----------------+----------+----------+
# | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
# +----------------+----------+----------+----------------+----------+----------+
#
# Replay Commands
#   0 = 0000 = Wait a cycle
#   1 = 0001 = Send data
#   2 = 0010 = Receive data
#   3 = 0011 = Assert done_o ouput signal
#   4 = 0100 = End test (calls $finish)
#   5 = 0101 = Wait for cycle_counter == 0
#   6 = 0110 = Initialize cycle_counter with a 16 bit number

################################################################################
# DESIGN SPECIFIC TAG INFO
#
# Number | Description            | Width
# -------+------------------------+-------
#    0   | Prev Link IO Control   | 3-bits
#    1   | Prev Link CORE Control | 2-bits
#    2   | Prev CT CORE Control   | 2-bits
#    3   | Next Link IO Control   | 3-bits
#    4   | Next Link CORE Control | 2-bits
#    5   | Next CT CORE Control   | 2-bits
#    6   | Core Control           | 9-bits
#    7   | Host Control           | 9-bits
#    8   | Router Control         | 9-bits
#
# Number of masters = 2
# Number of clients = 9
# Max data width = 5
#
# Packet lengths
# <4b-cmd> <2b-master en> <4b-nodeid> <1b-data not reset> <4b-length> <9b-data>
# <4b-cmd> <20b-immediate>
#
# There are 2 masters (ASIC and GW) but they are replicated systems. The lsb of
# the masterEn is the ASIC and the msb is the GW. The GW will be given WHID 0,0
# and the ASIC will be given WHID 1,0. Therefore, we want to keep the prev link
# of the GW in reset and the next link of the ASIC in reset.
#

################################################################################
#
# RESET BSG TAG MASTER
#
# First, we must reset the bsg_tag_master. To do this, we send a 1, then we
# send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1

# Send a full 0 packet to all masters
0001___11___0000_0_0000___000000000

# Wait
0110___00000000000000100000
0101___00000000000000000000

####################################################################################################
#  ___  ___   ___ _____ ___ _____ ___    _   ___   ___ ___     ___ ___  __  __ ___ _    _____  __
# | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \ |_ _/ _ \   / __/ _ \|  \/  | _ \ |  | __\ \/ /
# | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/  | | (_) | | (_| (_) | |\/| |  _/ |__| _| >  <
# |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|   |___\___/   \___\___/|_|  |_|_| |____|___/_/\_\
#
####################################################################################################

################################################################################
#
# RESET BSG TAG CLIENTS
#
# Next, we should reset each client node. To do this we send a packet
# that has all 1's for data, and has data_not_reset=0. The nodeID should
# be the ID of the client we are reseting, and length should be the
# corrent length of the packet. We should send this packet to each client.

#SEND  en   id=0 r l=3
0001___11___0000_0_0011___000000111
#SEND  en   id=1 r l=2
0001___11___0001_0_0010___000000011
#SEND  en   id=2 r l=2
0001___11___0010_0_0010___000000011
#SEND  en   id=3 r l=3
0001___11___0011_0_0011___000000111
#SEND  en   id=4 r l=2
0001___11___0100_0_0010___000000011
#SEND  en   id=5 r l=2
0001___11___0101_0_0010___000000011
#SEND  en   id=6 r l=9
0001___11___0110_0_1001___111111111
#SEND  en   id=7 r l=9
0001___11___0111_0_1001___111111111
#SEND  en   id=8 r l=9
0001___11___1000_0_1001___111111111

################################################################################
#
# START CONFIGURATION
#
# The bsg tag network is now live! We can begin our configuration.

### STEP 1: INITIALIZE EVERYTHING

# Reset both ASIC and GW Prev Link IO Control
#SEND  en  id=0 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___11__0000_1_0011___000000110

# Reset both ASIC and GW Prev Link CORE Control
#SEND  en  id=1 d l=2   {up_link_reset, down_link_reset}
0001___11__0001_1_0010___000000011

# Reset both ASIC and GW Prev CT CORE Control
#SEND  en  id=2 d l=2   {reset, fifo_reset}
0001___11__0010_1_0010___000000011

# Reset both ASIC and GW Next Link IO Control
#SEND  en  id=3 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___11__0011_1_0011___000000110

# Reset both ASIC and GW Next Link CORE Control
#SEND  en  id=4 d l=2   {up_link_reset, down_link_reset}
0001___11__0100_1_0010___000000011

# Reset both ASIC and GW Next CT CORE Control
#SEND  en  id=5 d l=2   {reset, fifo_reset}
0001___11__0101_1_0010___000000011

# Reset ASIC Router Control and set cord to 1
#SEND  en  id=6 d l=9   {reset, did=1}
0001___01__0110_1_1001___100000001
#SEND  en  id=7 d l=9   {reset, did=0}
0001___01__0111_1_1001___100000000
#SEND  en  id=8 d l=9   {reset, cord}
0001___01__1000_1_1001___100000001

# Reset GW Router Control and set cord to 0
#SEND  en  id=6 d l=9   {reset, did=1}
0001___10__0110_1_1001___100000001
#SEND  en  id=7 d l=9   {reset, did=0}
0001___10__0111_1_1001___100000000
#SEND  en  id=8 d l=9   {reset, cord}
0001___10__1000_1_1001___100000000

### STEP 2: Perform async token resets

# Async token reset for ASIC Prev IO Link
#SEND  en  id=0 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01__0000_1_0011___000000111
0001___01__0000_1_0011___000000110

# Assert async token reset for GW Next IO Link
#SEND  en  id=3 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___11__0011_1_0011___000000111
0001___11__0011_1_0011___000000110

### STEP 3: De-assert Upstream IO Links reset

# De-assert upstream reset for ASIC Prev IO Link
#SEND  en  id=0 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01__0000_1_0011___000000010

# De-assert upstream reset for GW Next IO Link
#SEND  en  id=3 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___10__0011_1_0011___000000010

### STEP 4: De-assert Downstream IO Links reset

# De-assert downstream reset for ASIC Prev IO Link
#SEND  en  id=0 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___01__0000_1_0011___000000000

# De-assert downstream reset for GW Next IO Link
#SEND  en  id=3 d l=3   {up_link_reset, down_link_reset, async_token_reset}
0001___10__0011_1_0011___000000000

### STEP 5/6: De-assert Upstream/Downstream CORE Links reset

# De-assert upstream/downstream reset for ASIC Prev CORE Link
#SEND  en  id=1 d l=2   {up_link_reset, down_link_reset}
0001___01__0001_1_0010___000000000

# De-assert upstream/downstream reset for GW Next CORE Link
#SEND  en  id=4 d l=2   {up_link_reset, down_link_reset}
0001___10__0100_1_0010___000000000

### STEP 7: De-assert CT reset and fifo reset

# De-assert reset and fifo_reset for ASIC Prev CT CORE Control
#SEND  en  id=2 d l=2   {reset, fifo_reset}
0001___01__0010_1_0010___000000000

# De-assert reset and fifo_reset for GW Next CT CORE Control
#SEND  en  id=5 d l=2   {reset, fifo_reset}
0001___10__0101_1_0010___000000000

### STEP 8: De-assert Router reset

# De-assert reset for ASIC Router Control
#SEND  en  id=6 d l=9   {reset, did=1}
0001___01__0110_1_1001___000000001
#SEND  en  id=7 d l=9   {reset, did=0}
0001___01__0111_1_1001___000000000
#SEND  en  id=8 d l=9   {reset, cord}
0001___01__1000_1_1001___000000001

# De-assert reset for GW Router Control
#SEND  en  id=6 d l=9   {reset, did=1}
0001___10__0110_1_1001___000000001
#SEND  en  id=7 d l=9   {reset, did=0}
0001___10__0111_1_1001___000000000
#SEND  en  id=8 d l=9   {reset, cord}
0001___10__1000_1_1001___000000000

################################################################################
#
# Done!
#
# Configuration is complete and we are out of reset. We should indicate we are
# done to allow the next part of the testbench to come alive.

# Wait
0110___00000000000000011111
0101___00000000000000000000

# Assert done_o
0011___00000000000000000000

